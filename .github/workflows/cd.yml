name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Build frontend
      run: npm run build:frontend
    
    - name: Build backend
      run: npm run build:backend
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:staging
    
    - name: Build and push backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/backend:staging
    
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging server..."
        # This would typically use SSH to connect to your staging server and update the deployment
        # For example:
        # ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} "cd /path/to/deployment && docker-compose pull && docker-compose up -d"
        echo "Deployment to staging complete"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Build frontend
      run: npm run build:frontend
    
    - name: Build backend
      run: npm run build:backend
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Extract tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:${{ steps.get_version.outputs.VERSION }}
          ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest
    
    - name: Build and push backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/backend:${{ steps.get_version.outputs.VERSION }}
          ${{ secrets.DOCKER_HUB_USERNAME }}/backend:latest
    
    - name: Deploy to production server
      run: |
        echo "Deploying to production server..."
        # This would typically use SSH to connect to your production server and update the deployment
        # For example:
        # ssh ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_SSH_HOST }} "cd /path/to/deployment && docker-compose pull && docker-compose up -d"
        echo "Deployment to production complete"